package xdptun

import (
	"encoding/binary"
	"net/netip"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestIPv4Checksum(t *testing.T) {
	testFrame := smallTcpPacket()
	ipHdr := testFrame.TunneledFrame[14+fouHeadroom:]
	chksum := computeIPv4Checksum(ipHdr)
	require.EqualValues(t, testFrame.TunnelInnerL3Checksum, chksum)
}

func TestL4ChecksumWithIPv4(t *testing.T) {
	tests := map[string]struct {
		pkt      []byte // everything from IP header on
		expected uint16
	}{
		"tcp": {
			// scapy:
			// (IP(flags="DF", id=58677, ttl=64, src="192.168.2.230", dst="192.168.2.227")/TCP(sport=58982,dport=5000,seq=2484831365,flags="S", window=64240,options=[('MSS', 1460), ('SAckOK', ''), ('Timestamp', (1104797918, 0)), ('NOP', None), ('WScale', 7)])
			pkt: []byte{
				0x45, 0x00, 0x00, 0x3c, 0xe5, 0x35, 0x40, 0x00,
				0x40, 0x06, 0xce, 0x6c, 0xc0, 0xa8, 0x02, 0xe6,
				0xc0, 0xa8, 0x02, 0xe3,
				0xe6, 0x66, 0x13, 0x88, 0x94, 0x1b, 0x84, 0x85,
				0x00, 0x00, 0x00, 0x00, 0xa0, 0x02, 0xfa, 0xf0,
				0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x05, 0xb4,
				0x04, 0x02, 0x08, 0x0a, 0x41, 0xd9, 0xe0, 0xde,
				0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x07,
			},
			expected: 0x90ad,
		},
		"encapsulated-tcp": {
			pkt: []byte{
				0x60, 0x01, 0xef, 0xfc, 0x00, 0x36, 0x11, 0x40,
				0x24, 0x04, 0xf8, 0x00, 0x80, 0x00, 0x01, 0x22,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b,
				0x2a, 0x0b, 0x21, 0xc0, 0x10, 0x07, 0x00, 0xca,
				0x00, 0x00, 0x75, 0x24, 0xe5, 0xc2, 0x88, 0x31,
				0xcb, 0x83, 0x67, 0xc6, 0x00, 0x36, 0xbe, 0x63,
				0x45, 0x00, 0x00, 0x28, 0x43, 0x1a, 0x00, 0x00,
				0xf1, 0x06, 0xb7, 0xc3, 0x2d, 0xe3, 0xfd, 0x6e,
				0x14, 0x69, 0x8f, 0x37, 0xc1, 0x53, 0x49, 0x67,
				0x5c, 0xf1, 0x85, 0x4a, 0x00, 0x00, 0x00, 0x00,
				0x50, 0x02, 0x04, 0x00, 0xef, 0xf3, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			expected: 0xbe63,
		},
		"udp": {
			// scapy:
			// IP(id=14309, flags="DF", ttl=64, src="192.168.2.230", dst="192.168.2.227")/UDP(sport=33202, dport=5000)/Raw("# Welcome ")
			pkt: []byte{
				0x45, 0x00, 0x00, 0x26, 0x37, 0xe5, 0x40, 0x00,
				0x40, 0x11, 0x7b, 0xc8, 0xc0, 0xa8, 0x02, 0xe6,
				0xc0, 0xa8, 0x02, 0xe3,
				0x81, 0xb2, 0x13, 0x88, 0x00, 0x12, 0x00, 0x00,
				0x23, 0x20, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d,
				0x65, 0x20,
			},
			expected: 0x27ff,
		},
		"udp2": {
			// scapy:
			// IP(src="192.168.2.100", dst="192.168.2.200")/UDP(sport=3837, dport=88)/("abcdefghijklmnopqrstuvwxyz")
			pkt: []byte{
				0x45, 0x00, 0x00, 0x36, 0x00, 0x01, 0x00, 0x00,
				0x40, 0x11, 0x00, 0x00, 0xc0, 0xa8, 0x02, 0x64,
				0xc0, 0xa8, 0x02, 0xc8, 0x0e, 0xfd, 0x00, 0x58,
				0x00, 0x22, 0xdb, 0x3c, 0x61, 0x62, 0x63, 0x64,
				0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c,
				0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74,
				0x75, 0x76, 0x77, 0x78, 0x79, 0x7a,
			},
			expected: 0xdb3c,
		},
		"icmp": {
			// scapy:
			// IP(id=9111, flags="DF", ttl=64, src="192.168.2.230", dst="192.168.2.227")/ICMP(type=8, code=0, id=0x9b, seq=1)/Raw('.\\xef\\...: xe3c\x00\x00\x00\x00\\xda{\x08\x00\x00\x00\x00\x00\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+...: ,-./01234567')
			pkt: []byte{
				0x45, 0x00, 0x00, 0x5d, 0x23, 0x97, 0x40, 0x00,
				0x40, 0x01, 0x00, 0x00, 0xc0, 0xa8, 0x02, 0xe6,
				0xc0, 0xa8, 0x02, 0xe3, 0x08, 0x00, 0x00, 0x00,
				0x00, 0x9b, 0x00, 0x01, 0x2e, 0x5c, 0x78, 0x65,
				0x66, 0x5c, 0x78, 0x65, 0x33, 0x63, 0x00, 0x00,
				0x00, 0x00, 0x5c, 0x78, 0x64, 0x61, 0x7b, 0x08,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x11, 0x12,
				0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a,
				0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22,
				0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a,
				0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32,
				0x33, 0x34, 0x35, 0x36, 0x37,
			},
			expected: 0x2fdc,
		},

		"encapsulated-icmp": {
			pkt: []byte{
				0x60, 0x09, 0x00, 0x10, 0x02, 0x48, 0x11, 0x40, 0x26, 0x03, 0xC0,
				0x20, 0x80, 0x09, 0x48, 0x00, 0xA0, 0x7F, 0xCC, 0x49, 0xF6, 0xAA,
				0x34, 0x68, 0x2A, 0x0B, 0x21, 0xC0, 0x10, 0x0A, 0x01, 0xB6, 0x00,
				0x00, 0x08, 0xF9, 0x49, 0x50, 0xD0, 0xF7, 0xFC, 0x03, 0xE4, 0x8F,
				0x02, 0x48, 0x00, 0x00, 0x45, 0xC0, 0x02, 0x40, 0x19, 0x15, 0x00,
				0x00, 0xFA, 0x01, 0xE1, 0x88, 0x56, 0x62, 0x98, 0xF0, 0x9E, 0xB4,
				0x35, 0x58, 0x03, 0x01, 0x1E, 0xB2, 0x00, 0x00, 0x00, 0x00, 0x45,
				0x00, 0x03, 0x1C, 0x5D, 0xFD, 0x40, 0x00, 0x36, 0x06, 0xE6, 0x4D,
				0x0A, 0x34, 0x04, 0x0B, 0x56, 0x62, 0x98, 0xF0, 0x01, 0xBB, 0xB6,
				0xA2, 0x9A, 0x57, 0x91, 0x84, 0x1E, 0x33, 0x35, 0xDE, 0x80, 0x18,
				0x01, 0xF6, 0x6D, 0xF3, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0A, 0xF2,
				0xFA, 0x82, 0x49, 0x00, 0xE3, 0xE8, 0x16, 0x17, 0x03, 0x03, 0x01,
				0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x5D, 0xE4,
				0x0B, 0x3D, 0xBF, 0x3F, 0x83, 0x5D, 0xA6, 0xFE, 0x2D, 0x92, 0xDE,
				0xBF, 0x1E, 0xA5, 0xEB, 0x51, 0x6F, 0x24, 0x84, 0x04, 0x61, 0x03,
				0x83, 0x43, 0xD6, 0x91, 0x61, 0xC7, 0x22, 0x2B, 0xC0, 0xFC, 0xB4,
				0xFB, 0x78, 0x8D, 0x9B, 0xC7, 0x4A, 0x95, 0xE7, 0xD4, 0x4A, 0x6C,
				0x65, 0x2B, 0x6C, 0x9D, 0x99, 0x70, 0x0C, 0x0D, 0xF9, 0x51, 0x0A,
				0x55, 0xDB, 0x27, 0x7A, 0x33, 0xC0, 0x20, 0x62, 0x5C, 0x6D, 0x3D,
				0x1A, 0x31, 0x49, 0x3B, 0xD9, 0x2E, 0x81, 0xB7, 0x61, 0xFB, 0x6F,
				0x13, 0x08, 0xB6, 0x93, 0xC7, 0xCB, 0x53, 0xFD, 0x66, 0x3C, 0xE7,
				0x49, 0xB5, 0x7E, 0x8F, 0x40, 0x50, 0xA5, 0x6D, 0x0C, 0x4F, 0x0A,
				0x2D, 0x22, 0xB6, 0x24, 0xEC, 0x31, 0x89, 0xF7, 0xDB, 0xAB, 0xDD,
				0xBC, 0x74, 0x4B, 0x2C, 0x6B, 0x14, 0x44, 0x9E, 0x70, 0xB7, 0x67,
				0xE9, 0xC8, 0x06, 0xAC, 0x8B, 0xF2, 0xB2, 0x1F, 0x53, 0xAF, 0x37,
				0x31, 0xAF, 0xBE, 0x3F, 0x9D, 0x7A, 0xF6, 0xB8, 0xA3, 0xD1, 0x5C,
				0x8B, 0xA9, 0xEB, 0xE0, 0x17, 0x0E, 0xCC, 0x1D, 0x2F, 0x83, 0x65,
				0xB6, 0xAC, 0x45, 0x6D, 0xE2, 0x6C, 0x12, 0x33, 0xE1, 0x70, 0x26,
				0xBC, 0x16, 0x5B, 0x68, 0xDA, 0x5E, 0x47, 0xD4, 0x4D, 0x62, 0xC2,
				0x73, 0x60, 0x21, 0x0F, 0x4D, 0x3E, 0x04, 0xA2, 0x28, 0x43, 0x28,
				0xA6, 0x81, 0xE3, 0x21, 0xA5, 0x75, 0xD4, 0x4D, 0x43, 0x9A, 0xF5,
				0x58, 0xBA, 0xBD, 0xDA, 0xD6, 0xEF, 0x92, 0x19, 0x43, 0xD3, 0x96,
				0xC7, 0xC5, 0x09, 0x08, 0x3D, 0xBF, 0x04, 0x3E, 0xC5, 0x85, 0x66,
				0x9D, 0x07, 0x89, 0x1A, 0x5D, 0xC5, 0xBF, 0x83, 0x8C, 0x87, 0x13,
				0x11, 0xED, 0xC2, 0x9B, 0x44, 0xC5, 0x0D, 0x26, 0xB2, 0x37, 0xEE,
				0x6B, 0x7F, 0xF9, 0xBF, 0x02, 0x40, 0x37, 0x8A, 0xDC, 0x58, 0xE4,
				0x44, 0xFE, 0xE3, 0x84, 0xC6, 0xB2, 0x8E, 0xA9, 0x36, 0xB7, 0x39,
				0x29, 0xE3, 0x2B, 0x56, 0x72, 0x05, 0x82, 0xEC, 0x73, 0xDA, 0x49,
				0x22, 0x14, 0x63, 0xA2, 0x62, 0x25, 0x04, 0x7A, 0xFD, 0x16, 0x82,
				0x88, 0x11, 0x0F, 0xB6, 0x38, 0xE6, 0xCC, 0x35, 0xA0, 0x81, 0x62,
				0x8F, 0x88, 0x8E, 0xAC, 0xD1, 0x93, 0x98, 0xAF, 0x71, 0x79, 0x36,
				0x21, 0x34, 0x12, 0x75, 0xD0, 0x8A, 0x4A, 0x4D, 0x85, 0x51, 0x8C,
				0xD9, 0x68, 0x3E, 0xAD, 0x4E, 0x35, 0x80, 0x18, 0x6A, 0x55, 0xDE,
				0xB5, 0xAB, 0x42, 0x6D, 0x54, 0x27, 0x17, 0x03, 0x03, 0x01, 0x5F,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x13, 0xED, 0x04,
				0xCE, 0x52, 0xE9, 0x84, 0x0D, 0x8E, 0xA4, 0xC5, 0x5B, 0xA8, 0x31,
				0x67, 0x4D, 0xF2, 0xEA, 0xE2, 0xBA, 0xDD, 0x14, 0x82, 0xF4, 0xE3,
				0x23, 0x50, 0x9D, 0x7B, 0x9B, 0xB9, 0xFF, 0xA9, 0xA4, 0xFE, 0xE6,
				0x0D, 0xFF, 0x41, 0x9C, 0xAC, 0xA1, 0x82, 0x1E, 0xFB, 0xD7, 0x72,
				0x72, 0x7F, 0xCE, 0xBC, 0x0A, 0xBB, 0x8B, 0x54, 0x62, 0x4A, 0x04,
				0xEA, 0xF2, 0xF1, 0x8F, 0xFB, 0x30, 0x38, 0xE2, 0x77, 0x7B, 0x45,
				0x64, 0x37, 0xC0, 0xD9, 0xE0, 0x6C, 0xC5, 0x12, 0x00, 0x2D, 0x7E,
				0xAD, 0x29, 0x58, 0x7C, 0x2B, 0xF5, 0x11, 0x49, 0x6C, 0x78, 0x57,
				0x23, 0xC9, 0xB4, 0x16, 0x06, 0x93, 0x22, 0x05, 0x56, 0xD3, 0xE4,
				0xF3, 0x93, 0x6F, 0xA8, 0xAB, 0x8F, 0x17, 0xD2, 0x31, 0x5F, 0x99,
				0x30, 0x09, 0xAB, 0x5B, 0x40, 0xEA, 0xEB, 0xC8, 0x14, 0x10, 0x50,
				0xFF, 0x6A, 0x71, 0xC8, 0xC7, 0xAC, 0x6D, 0x20,
			},
			expected: 0x53f4,
		},
		"ipv4-tcp-with-ethernet-trailer": {
			pkt: []byte{
				0x45, 0x00, 0x00, 0x2c, 0xd4, 0x31, 0x00, 0x00,
				0xee, 0x06, 0x1c, 0x26, 0xa2, 0xd8, 0x95, 0xfb,
				0x14, 0x69, 0x8f, 0x37,

				0xd6, 0x8b, 0x23, 0xd2, 0x23, 0xce, 0x44, 0x2c,
				0x00, 0x00, 0x00, 0x00, 0x60, 0x02, 0xff, 0xff,
				0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x05, 0xb4,
				0x00, 0x00,
			},
			expected: 0x595a,
		},
	}

	for name, tc := range tests {
		t.Run(name, func(t *testing.T) {
			require.Equal(t, tc.expected, computeLayer4Checksum(tc.pkt))
		})
	}
}

func TestVerifyL4Checksum(t *testing.T) {
	pkt := smallTcpPacket().TunneledFrame
	require.True(t, verifyChecksum(pkt[14:]))

	pkt[len(pkt)-4] = pkt[len(pkt)-4] + 1

	require.False(t, verifyChecksum(pkt[14:]))
}

func TestTunnelFastChecksum(t *testing.T) {
	testFrame := largeTcpPacket()
	chksum := fastEncapChecksumCompute(testFrame.TunneledFrame[14:])
	require.Equal(t, testFrame.TunnelL4Checksum, chksum)
}

func TestFastChecksumRecompute(t *testing.T) {
	tests := map[string]struct {
		hc       uint16
		m        uint32
		mp       uint32
		expected uint16
	}{
		"rfc1624": {
			hc:       0xdd2f,
			m:        0x5555,
			mp:       0x3285,
			expected: 0x0000,
		},
		"unchanged": {
			hc:       0xdd2f,
			m:        0x5555,
			mp:       0x5555,
			expected: 0xdd2f,
		},
	}

	for name, tc := range tests {
		t.Run(name, func(t *testing.T) {
			require.Equal(t, tc.expected, fastChecksumRecompute(tc.hc, tc.m, tc.mp))
		})
	}
}

func BenchmarkIPv4Checksum(b *testing.B) {
	ipHdr := smallTcpPacket().TunneledFrame[14:]

	for i := 0; i < b.N; i++ {
		computeIPv4Checksum(ipHdr)
	}
}

func BenchmarkTcpChecksum(b *testing.B) {
	benches := map[string][]byte{
		"ShortPacket": smallTcpPacket().TunneledFrame,
		"LargePacket": largeTcpPacket().TunneledFrame,
	}

	for name, pkt := range benches {
		b.Run(name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				computeLayer4Checksum(pkt[14:])
			}
		})
	}
}

func BenchmarkL4FastChecksumIPv4(b *testing.B) {
	oldIP := netip.AddrFrom4([4]byte{0xa1, 0xb2, 0xc3, 0xd4})
	newIP := netip.AddrFrom4([4]byte{0xde, 0xad, 0xbe, 0xef})

	b.Run("NoAllocs", func(b *testing.B) {
		m := binary.BigEndian.Uint32(oldIP.AsSlice())
		mp := binary.BigEndian.Uint32(newIP.AsSlice())
		for i := 0; i < b.N; i++ {
			fastChecksumRecompute(0xdd2f, m, mp)
		}
	})

	b.Run("StackAlloc", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			o := oldIP.As4()
			n := newIP.As4()
			m := binary.BigEndian.Uint32(o[:])
			mp := binary.BigEndian.Uint32(n[:])
			fastChecksumRecompute(0xdd2f, m, mp)
		}
	})

	b.Run("HeapAlloc", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			m := binary.BigEndian.Uint32(oldIP.AsSlice())
			mp := binary.BigEndian.Uint32(newIP.AsSlice())
			fastChecksumRecompute(0xdd2f, m, mp)
		}
	})
}

func BenchmarkTunnelL4Checksum(b *testing.B) {
	pkt := largeTcpPacket().TunneledFrame

	b.Run("Full", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			computeLayer4Checksum(pkt[14:])
		}
	})

	b.Run("Fast", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			fastEncapChecksumCompute(pkt[14:])
		}
	})
}

type TestFrame struct {
	IPMap map[netip.Addr]AssociatedIPs

	OriginalFrame      []byte
	OriginalL3Checksum uint16
	OriginalL4Checksum uint16

	TunneledFrame         []byte
	TunnelSourcePort      uint16
	TunnelL3Checksum      uint16
	TunnelL4Checksum      uint16
	TunnelInnerL3Checksum uint16
	TunnelInnerL4Checksum uint16
}

func smallTcpPacket() TestFrame {
	return TestFrame{
		IPMap: map[netip.Addr]AssociatedIPs{
			netip.MustParseAddr("192.168.2.250"): {
				EIP:          netip.MustParseAddr("192.168.2.250"),
				TunnelSource: netip.MustParseAddr("fdcf:8856:2757:d735:216:3eff:fe9e:68d8"),
				TunnelDest:   netip.MustParseAddr("fdcf:8856:2757:d735:216:3eff:feb2:b9f3"),
				TunnelPort:   5555,
			},
		},
		OriginalFrame: []byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x16, 0x3e, 0x9e, 0x68, 0xd8, 0x02, 0x08, 0x20, 0x86, 0x1a, 0xc5, 0x08, 0x00, 0x45, 0x00,
			0x00, 0x3c, 0xc3, 0x56, 0x40, 0x00, 0x40, 0x06, 0xf0, 0x34, 0xc0, 0xa8, 0x02, 0xe6, 0xc0, 0xa8,
			0x02, 0xfa, 0xd3, 0x30, 0x13, 0x88, 0x81, 0x14, 0x75, 0xd6, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x02,
			0xfa, 0xf0, 0x0a, 0x24, 0x00, 0x00, 0x02, 0x04, 0x05, 0xb4, 0x04, 0x02, 0x08, 0x0a, 0xc3, 0x0e,
			0x1b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x07,
		},
		OriginalL3Checksum: 0xf034,
		OriginalL4Checksum: 0x0a24,
		TunneledFrame: []byte{
			0x00, 0x16, 0x3e, 0xb2, 0xb9, 0xf3, 0x00, 0x16, 0x3e, 0x9e, 0x68, 0xd8, 0x86, 0xdd,

			0x60, 0x02, 0xc4, 0x98, 0x00, 0x44, 0x11, 0x40, 0xfd, 0xcf, 0x88, 0x56, 0x27, 0x57, 0xd7, 0x35,
			0x02, 0x16, 0x3e, 0xff, 0xfe, 0x9e, 0x68, 0xd8, 0xfd, 0xcf, 0x88, 0x56, 0x27, 0x57, 0xd7, 0x35,
			0x02, 0x16, 0x3e, 0xff, 0xfe, 0xb2, 0xb9, 0xf3,

			0xdb, 0xee, 0x15, 0xb3, 0x00, 0x44, 0xe9, 0x74,

			0x45, 0x00, 0x00, 0x3c, 0xc3, 0x56, 0x40, 0x00, 0x40, 0x06, 0xf0, 0x34, 0xc0, 0xa8, 0x02, 0xe6,
			0xc0, 0xa8, 0x02, 0xfa, 0xd3, 0x30, 0x13, 0x88, 0x81, 0x14, 0x75, 0xd6, 0x00, 0x00, 0x00, 0x00,
			0xa0, 0x02, 0xfa, 0xf0, 0x0a, 0x24, 0x00, 0x00, 0x02, 0x04, 0x05, 0xb4, 0x04, 0x02, 0x08, 0x0a,
			0xc3, 0x0e, 0x1b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x07,
		},
		TunnelSourcePort:      56302,
		TunnelL3Checksum:      0, // IPv6 headers don't have checksums
		TunnelL4Checksum:      0xe974,
		TunnelInnerL3Checksum: 0xf034,
		TunnelInnerL4Checksum: 0x0a24,
	}
}

func largeTcpPacket() TestFrame {
	return TestFrame{
		IPMap: map[netip.Addr]AssociatedIPs{
			netip.MustParseAddr("192.168.2.250"): {
				EIP:          netip.MustParseAddr("192.168.2.250"),
				TunnelSource: netip.MustParseAddr("fdcf:8856:2757:d735:216:3eff:fe9e:68d8"),
				TunnelDest:   netip.MustParseAddr("fdcf:8856:2757:d735:216:3eff:feb2:b9f3"),
				TunnelPort:   5555,
			},
		},
		OriginalFrame: []byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x16, 0x3e, 0x9e, 0x68, 0xd8, 0x02, 0x08, 0x20, 0x86, 0x1a, 0xc5, 0x08, 0x00, 0x45, 0x00,
			0x05, 0xac, 0xc3, 0x58, 0x40, 0x00, 0x40, 0x06, 0xea, 0xc2, 0xc0, 0xa8, 0x02, 0xe6, 0xc0, 0xa8,
			0x02, 0xfa, 0xd3, 0x30, 0x13, 0x88, 0x81, 0x14, 0x75, 0xd7, 0x41, 0xaa, 0x10, 0xbc, 0x80, 0x10,
			0x01, 0xf6, 0x77, 0x6c, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0xc3, 0x0e, 0x1b, 0x11, 0x9b, 0x1e,
			0xce, 0x0f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
			0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x2f, 0x6c,
			0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x0a, 0x0a, 0x67, 0x6f,
			0x20, 0x31, 0x2e, 0x31, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x20, 0x28,
			0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
			0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x71, 0x6c, 0x63, 0x6f,
			0x6e, 0x6e, 0x20, 0x76, 0x30, 0x2e, 0x35, 0x2e, 0x32, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64,
			0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x63,
			0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x20, 0x76, 0x31, 0x2e, 0x37, 0x2e, 0x30, 0x0a, 0x09, 0x63,
			0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
			0x67, 0x6f, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x31, 0x2e, 0x35, 0x2e,
			0x30, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x42, 0x75,
			0x72, 0x6e, 0x74, 0x53, 0x75, 0x73, 0x68, 0x69, 0x2f, 0x74, 0x6f, 0x6d, 0x6c, 0x20, 0x76, 0x31,
			0x2e, 0x32, 0x2e, 0x31, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
			0x2f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x2f, 0x78, 0x64, 0x70, 0x20, 0x76, 0x30, 0x2e, 0x34,
			0x2e, 0x33, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d,
			0x61, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x64, 0x73, 0x2f, 0x73, 0x65, 0x6d, 0x76, 0x65,
			0x72, 0x2f, 0x76, 0x33, 0x20, 0x76, 0x33, 0x2e, 0x31, 0x2e, 0x31, 0x0a, 0x09, 0x67, 0x69, 0x74,
			0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x69, 0x79, 0x75, 0x6e, 0x2f, 0x61,
			0x6c, 0x69, 0x62, 0x61, 0x62, 0x61, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x73, 0x64, 0x6b,
			0x2d, 0x67, 0x6f, 0x20, 0x76, 0x31, 0x2e, 0x36, 0x31, 0x2e, 0x31, 0x35, 0x38, 0x38, 0x0a, 0x09,
			0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x69, 0x79, 0x75,
			0x6e, 0x2f, 0x61, 0x6c, 0x69, 0x79, 0x75, 0x6e, 0x2d, 0x6f, 0x73, 0x73, 0x2d, 0x67, 0x6f, 0x2d,
			0x73, 0x64, 0x6b, 0x20, 0x76, 0x32, 0x2e, 0x32, 0x2e, 0x34, 0x2b, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
			0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
			0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x2f, 0x64, 0x6f, 0x63, 0x6b, 0x65,
			0x72, 0x20, 0x76, 0x32, 0x30, 0x2e, 0x31, 0x30, 0x2e, 0x31, 0x37, 0x2b, 0x69, 0x6e, 0x63, 0x6f,
			0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
			0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x2f,
			0x74, 0x6c, 0x73, 0x6d, 0x61, 0x73, 0x71, 0x20, 0x76, 0x30, 0x2e, 0x34, 0x2e, 0x36, 0x0a, 0x09,
			0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x6c, 0x61,
			0x6e, 0x74, 0x65, 0x72, 0x6e, 0x2f, 0x75, 0x74, 0x6c, 0x73, 0x20, 0x76, 0x30, 0x2e, 0x30, 0x2e,
			0x30, 0x2d, 0x32, 0x30, 0x32, 0x32, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x33, 0x35, 0x35, 0x36,
			0x2d, 0x31, 0x37, 0x30, 0x31, 0x34, 0x63, 0x62, 0x36, 0x66, 0x63, 0x34, 0x61, 0x0a, 0x09, 0x67,
			0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x6c, 0x61, 0x6e,
			0x74, 0x65, 0x72, 0x6e, 0x2f, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x20, 0x76, 0x30, 0x2e, 0x31, 0x2e,
			0x31, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f,
			0x2d, 0x72, 0x65, 0x64, 0x69, 0x73, 0x2f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x2f, 0x76, 0x39, 0x20,
			0x76, 0x39, 0x2e, 0x30, 0x2e, 0x30, 0x2d, 0x72, 0x63, 0x2e, 0x31, 0x0a, 0x09, 0x67, 0x69, 0x74,
			0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x67,
			0x6f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x76, 0x31, 0x2e, 0x31, 0x2e, 0x31, 0x39, 0x0a,
			0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
			0x6c, 0x65, 0x2f, 0x75, 0x75, 0x69, 0x64, 0x20, 0x76, 0x31, 0x2e, 0x33, 0x2e, 0x30, 0x0a, 0x09,
			0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x69,
			0x63, 0x6f, 0x72, 0x70, 0x2f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x20, 0x76,
			0x31, 0x2e, 0x37, 0x2e, 0x32, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
			0x6d, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x76, 0x61, 0x75, 0x6c,
			0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x67, 0x63, 0x70, 0x20, 0x76,
			0x30, 0x2e, 0x31, 0x2e, 0x30, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
			0x6d, 0x2f, 0x68, 0x6f, 0x6e, 0x65, 0x79, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6f, 0x2f, 0x6c, 0x69,
			0x62, 0x68, 0x6f, 0x6e, 0x65, 0x79, 0x2d, 0x67, 0x6f, 0x20, 0x76, 0x31, 0x2e, 0x31, 0x35, 0x2e,
			0x38, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x61,
			0x6e, 0x67, 0x75, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x6d, 0x6e, 0x65, 0x74, 0x20, 0x76,
			0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2d, 0x32, 0x30, 0x32, 0x32, 0x30, 0x37, 0x33, 0x31, 0x32, 0x31,
			0x34, 0x32, 0x33, 0x34, 0x2d, 0x38, 0x32, 0x33, 0x65, 0x64, 0x62, 0x65, 0x64, 0x31, 0x65, 0x39,
			0x64, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61,
			0x63, 0x6b, 0x63, 0x2f, 0x70, 0x67, 0x63, 0x6f, 0x6e, 0x6e, 0x20, 0x76, 0x31, 0x2e, 0x31, 0x33,
			0x2e, 0x30, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a,
			0x61, 0x63, 0x6b, 0x63, 0x2f, 0x70, 0x67, 0x78, 0x2f, 0x76, 0x34, 0x20, 0x76, 0x34, 0x2e, 0x31,
			0x37, 0x2e, 0x32, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
			0x6a, 0x6d, 0x6f, 0x69, 0x72, 0x6f, 0x6e, 0x2f, 0x73, 0x71, 0x6c, 0x78, 0x20, 0x76, 0x31, 0x2e,
			0x33, 0x2e, 0x35, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
			0x6a, 0x75, 0x6c, 0x69, 0x65, 0x6e, 0x73, 0x63, 0x68, 0x6d, 0x69, 0x64, 0x74, 0x2f, 0x68, 0x74,
			0x74, 0x70, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x20, 0x76, 0x31, 0x2e, 0x33, 0x2e, 0x30, 0x0a,
			0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x66, 0x72, 0x69,
			0x64, 0x6d, 0x61, 0x6e, 0x2f, 0x74, 0x70, 0x61, 0x72, 0x73, 0x65, 0x20, 0x76, 0x30, 0x2e, 0x31,
			0x30, 0x2e, 0x32, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
			0x6d, 0x72, 0x6f, 0x74, 0x68, 0x2f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x20, 0x76, 0x30, 0x2e,
			0x31, 0x2e, 0x31, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
			0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x69,
			0x6d, 0x61, 0x67, 0x65, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x20, 0x76, 0x31, 0x2e, 0x30, 0x2e, 0x33,
			0x2d, 0x30, 0x2e, 0x32, 0x30, 0x32, 0x31, 0x31, 0x32, 0x30, 0x32, 0x31, 0x38, 0x33, 0x34, 0x35,
			0x32, 0x2d, 0x63, 0x35, 0x61, 0x37, 0x34, 0x62, 0x63, 0x63, 0x61, 0x37, 0x39, 0x39, 0x0a, 0x09,
			0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c,
			0x65, 0x2f, 0x6f, 0x63, 0x69, 0x2d, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x76, 0x36, 0x35,
			0x20, 0x76, 0x36, 0x35, 0x2e, 0x31, 0x2e, 0x30, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
			0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x70, 0x74, 0x65, 0x72, 0x6d,
			0x20, 0x76, 0x30, 0x2e, 0x31, 0x32, 0x2e, 0x34, 0x31, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75,
			0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x73, 0x2f, 0x7a, 0x65, 0x72, 0x6f, 0x6c, 0x6f, 0x67,
			0x20, 0x76, 0x31, 0x2e, 0x32, 0x36, 0x2e, 0x31, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
			0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x78, 0x2f, 0x68, 0x61, 0x73,
			0x68, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2d, 0x32, 0x30, 0x32,
			0x30, 0x30, 0x37, 0x32, 0x37, 0x30, 0x30, 0x33, 0x35, 0x30, 0x39, 0x2d, 0x32, 0x32, 0x63, 0x30,
			0x63, 0x37, 0x61, 0x62, 0x36, 0x62, 0x31, 0x62, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
			0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x61, 0x6f, 0x6c, 0x61, 0x63, 0x63, 0x69, 0x2f, 0x6d,
			0x75, 0x72, 0x6d, 0x75, 0x72, 0x33, 0x20, 0x76, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2d, 0x32, 0x30,
			0x31, 0x38, 0x30, 0x31, 0x31, 0x38, 0x32, 0x30, 0x32, 0x38, 0x33, 0x30, 0x2d, 0x66, 0x30, 0x39,
			0x39, 0x37, 0x39, 0x65, 0x63, 0x62, 0x63, 0x37, 0x32, 0x0a,
		},
		OriginalL3Checksum: 0xeac2,
		OriginalL4Checksum: 0x776c,
		TunneledFrame: []byte{
			0x00, 0x16, 0x3e, 0xb2, 0xb9, 0xf3, 0x00, 0x16, 0x3e, 0x9e, 0x68, 0xd8, 0x86, 0xdd, 0x60, 0x02,
			0xc4, 0x98, 0x05, 0xb4, 0x11, 0x40, 0xfd, 0xcf, 0x88, 0x56, 0x27, 0x57, 0xd7, 0x35, 0x02, 0x16,
			0x3e, 0xff, 0xfe, 0x9e, 0x68, 0xd8, 0xfd, 0xcf, 0x88, 0x56, 0x27, 0x57, 0xd7, 0x35, 0x02, 0x16,
			0x3e, 0xff, 0xfe, 0xb2, 0xb9, 0xf3, 0xdb, 0xee, 0x15, 0xb3, 0x05, 0xb4, 0xe4, 0x04, 0x45, 0x00,
			0x05, 0xac, 0xc3, 0x58, 0x40, 0x00, 0x40, 0x06, 0xea, 0xc2, 0xc0, 0xa8, 0x02, 0xe6, 0xc0, 0xa8,
			0x02, 0xfa, 0xd3, 0x30, 0x13, 0x88, 0x81, 0x14, 0x75, 0xd7, 0x41, 0xaa, 0x10, 0xbc, 0x80, 0x10,
			0x01, 0xf6, 0x77, 0x6c, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0xc3, 0x0e, 0x1b, 0x11, 0x9b, 0x1e,
			0xce, 0x0f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
			0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x2f, 0x6c,
			0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x0a, 0x0a, 0x67, 0x6f,
			0x20, 0x31, 0x2e, 0x31, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x20, 0x28,
			0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
			0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x71, 0x6c, 0x63, 0x6f,
			0x6e, 0x6e, 0x20, 0x76, 0x30, 0x2e, 0x35, 0x2e, 0x32, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64,
			0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x63,
			0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x20, 0x76, 0x31, 0x2e, 0x37, 0x2e, 0x30, 0x0a, 0x09, 0x63,
			0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
			0x67, 0x6f, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x31, 0x2e, 0x35, 0x2e,
			0x30, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x42, 0x75,
			0x72, 0x6e, 0x74, 0x53, 0x75, 0x73, 0x68, 0x69, 0x2f, 0x74, 0x6f, 0x6d, 0x6c, 0x20, 0x76, 0x31,
			0x2e, 0x32, 0x2e, 0x31, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
			0x2f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x2f, 0x78, 0x64, 0x70, 0x20, 0x76, 0x30, 0x2e, 0x34,
			0x2e, 0x33, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d,
			0x61, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x64, 0x73, 0x2f, 0x73, 0x65, 0x6d, 0x76, 0x65,
			0x72, 0x2f, 0x76, 0x33, 0x20, 0x76, 0x33, 0x2e, 0x31, 0x2e, 0x31, 0x0a, 0x09, 0x67, 0x69, 0x74,
			0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x69, 0x79, 0x75, 0x6e, 0x2f, 0x61,
			0x6c, 0x69, 0x62, 0x61, 0x62, 0x61, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x73, 0x64, 0x6b,
			0x2d, 0x67, 0x6f, 0x20, 0x76, 0x31, 0x2e, 0x36, 0x31, 0x2e, 0x31, 0x35, 0x38, 0x38, 0x0a, 0x09,
			0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x69, 0x79, 0x75,
			0x6e, 0x2f, 0x61, 0x6c, 0x69, 0x79, 0x75, 0x6e, 0x2d, 0x6f, 0x73, 0x73, 0x2d, 0x67, 0x6f, 0x2d,
			0x73, 0x64, 0x6b, 0x20, 0x76, 0x32, 0x2e, 0x32, 0x2e, 0x34, 0x2b, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
			0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
			0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x2f, 0x64, 0x6f, 0x63, 0x6b, 0x65,
			0x72, 0x20, 0x76, 0x32, 0x30, 0x2e, 0x31, 0x30, 0x2e, 0x31, 0x37, 0x2b, 0x69, 0x6e, 0x63, 0x6f,
			0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
			0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x2f,
			0x74, 0x6c, 0x73, 0x6d, 0x61, 0x73, 0x71, 0x20, 0x76, 0x30, 0x2e, 0x34, 0x2e, 0x36, 0x0a, 0x09,
			0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x6c, 0x61,
			0x6e, 0x74, 0x65, 0x72, 0x6e, 0x2f, 0x75, 0x74, 0x6c, 0x73, 0x20, 0x76, 0x30, 0x2e, 0x30, 0x2e,
			0x30, 0x2d, 0x32, 0x30, 0x32, 0x32, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x33, 0x35, 0x35, 0x36,
			0x2d, 0x31, 0x37, 0x30, 0x31, 0x34, 0x63, 0x62, 0x36, 0x66, 0x63, 0x34, 0x61, 0x0a, 0x09, 0x67,
			0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x6c, 0x61, 0x6e,
			0x74, 0x65, 0x72, 0x6e, 0x2f, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x20, 0x76, 0x30, 0x2e, 0x31, 0x2e,
			0x31, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f,
			0x2d, 0x72, 0x65, 0x64, 0x69, 0x73, 0x2f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x2f, 0x76, 0x39, 0x20,
			0x76, 0x39, 0x2e, 0x30, 0x2e, 0x30, 0x2d, 0x72, 0x63, 0x2e, 0x31, 0x0a, 0x09, 0x67, 0x69, 0x74,
			0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x67,
			0x6f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x76, 0x31, 0x2e, 0x31, 0x2e, 0x31, 0x39, 0x0a,
			0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
			0x6c, 0x65, 0x2f, 0x75, 0x75, 0x69, 0x64, 0x20, 0x76, 0x31, 0x2e, 0x33, 0x2e, 0x30, 0x0a, 0x09,
			0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x69,
			0x63, 0x6f, 0x72, 0x70, 0x2f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x20, 0x76,
			0x31, 0x2e, 0x37, 0x2e, 0x32, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
			0x6d, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x76, 0x61, 0x75, 0x6c,
			0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x67, 0x63, 0x70, 0x20, 0x76,
			0x30, 0x2e, 0x31, 0x2e, 0x30, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
			0x6d, 0x2f, 0x68, 0x6f, 0x6e, 0x65, 0x79, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6f, 0x2f, 0x6c, 0x69,
			0x62, 0x68, 0x6f, 0x6e, 0x65, 0x79, 0x2d, 0x67, 0x6f, 0x20, 0x76, 0x31, 0x2e, 0x31, 0x35, 0x2e,
			0x38, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x61,
			0x6e, 0x67, 0x75, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x6d, 0x6e, 0x65, 0x74, 0x20, 0x76,
			0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2d, 0x32, 0x30, 0x32, 0x32, 0x30, 0x37, 0x33, 0x31, 0x32, 0x31,
			0x34, 0x32, 0x33, 0x34, 0x2d, 0x38, 0x32, 0x33, 0x65, 0x64, 0x62, 0x65, 0x64, 0x31, 0x65, 0x39,
			0x64, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61,
			0x63, 0x6b, 0x63, 0x2f, 0x70, 0x67, 0x63, 0x6f, 0x6e, 0x6e, 0x20, 0x76, 0x31, 0x2e, 0x31, 0x33,
			0x2e, 0x30, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a,
			0x61, 0x63, 0x6b, 0x63, 0x2f, 0x70, 0x67, 0x78, 0x2f, 0x76, 0x34, 0x20, 0x76, 0x34, 0x2e, 0x31,
			0x37, 0x2e, 0x32, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
			0x6a, 0x6d, 0x6f, 0x69, 0x72, 0x6f, 0x6e, 0x2f, 0x73, 0x71, 0x6c, 0x78, 0x20, 0x76, 0x31, 0x2e,
			0x33, 0x2e, 0x35, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
			0x6a, 0x75, 0x6c, 0x69, 0x65, 0x6e, 0x73, 0x63, 0x68, 0x6d, 0x69, 0x64, 0x74, 0x2f, 0x68, 0x74,
			0x74, 0x70, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x20, 0x76, 0x31, 0x2e, 0x33, 0x2e, 0x30, 0x0a,
			0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x66, 0x72, 0x69,
			0x64, 0x6d, 0x61, 0x6e, 0x2f, 0x74, 0x70, 0x61, 0x72, 0x73, 0x65, 0x20, 0x76, 0x30, 0x2e, 0x31,
			0x30, 0x2e, 0x32, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
			0x6d, 0x72, 0x6f, 0x74, 0x68, 0x2f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x20, 0x76, 0x30, 0x2e,
			0x31, 0x2e, 0x31, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
			0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x69,
			0x6d, 0x61, 0x67, 0x65, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x20, 0x76, 0x31, 0x2e, 0x30, 0x2e, 0x33,
			0x2d, 0x30, 0x2e, 0x32, 0x30, 0x32, 0x31, 0x31, 0x32, 0x30, 0x32, 0x31, 0x38, 0x33, 0x34, 0x35,
			0x32, 0x2d, 0x63, 0x35, 0x61, 0x37, 0x34, 0x62, 0x63, 0x63, 0x61, 0x37, 0x39, 0x39, 0x0a, 0x09,
			0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c,
			0x65, 0x2f, 0x6f, 0x63, 0x69, 0x2d, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x76, 0x36, 0x35,
			0x20, 0x76, 0x36, 0x35, 0x2e, 0x31, 0x2e, 0x30, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
			0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x70, 0x74, 0x65, 0x72, 0x6d,
			0x20, 0x76, 0x30, 0x2e, 0x31, 0x32, 0x2e, 0x34, 0x31, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75,
			0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x73, 0x2f, 0x7a, 0x65, 0x72, 0x6f, 0x6c, 0x6f, 0x67,
			0x20, 0x76, 0x31, 0x2e, 0x32, 0x36, 0x2e, 0x31, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
			0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x78, 0x2f, 0x68, 0x61, 0x73,
			0x68, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2d, 0x32, 0x30, 0x32,
			0x30, 0x30, 0x37, 0x32, 0x37, 0x30, 0x30, 0x33, 0x35, 0x30, 0x39, 0x2d, 0x32, 0x32, 0x63, 0x30,
			0x63, 0x37, 0x61, 0x62, 0x36, 0x62, 0x31, 0x62, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
			0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x61, 0x6f, 0x6c, 0x61, 0x63, 0x63, 0x69, 0x2f, 0x6d,
			0x75, 0x72, 0x6d, 0x75, 0x72, 0x33, 0x20, 0x76, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2d, 0x32, 0x30,
			0x31, 0x38, 0x30, 0x31, 0x31, 0x38, 0x32, 0x30, 0x32, 0x38, 0x33, 0x30, 0x2d, 0x66, 0x30, 0x39,
			0x39, 0x37, 0x39, 0x65, 0x63, 0x62, 0x63, 0x37, 0x32, 0x0a,
		},
		TunnelSourcePort:      56302,
		TunnelL3Checksum:      0, // IPv6 headers don't have checksums
		TunnelL4Checksum:      0xe404,
		TunnelInnerL3Checksum: 0xeac2,
		TunnelInnerL4Checksum: 0x776c,
	}
}
